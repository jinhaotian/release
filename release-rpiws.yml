- hosts: rpiws
  serial: 1
  vars:
    http_port: 8080
    app: rpiws 
    version_page: version 
    application_config: rpiws-app-cfg
    application:  rpiws-app
    test_name: rpiws

  pre_tasks:
  
  - name: Send notification message via Slack channel
    local_action:
      module: slack
      token: T024R4HF1/B1RDDPWM7/CifLKsgIqih1bQj6VFzbvqYt
      msg: "{{ inventory_hostname }} deployment {{ version }} started"
      channel: "#platform-notification"
      username: "Release Script"
      link_names: 0
      parse: 'none'

  - name: take out of load balancer pool
    command: ssh deployment-corp-1101.sea1.rhapsody.com  " lbmgr -host  {{ inventory_hostname }} --port {{ http_port }} --takeout  --use-default-bleeding-time"
    when: loadbalancer != "false"
    delegate_to: 127.0.0.1
  

  tasks:

  - name: push config {{ version  }} 
    command: "{{ item }}"
    delegate_to: 127.0.0.1
    with_items:
    - ssh deployment-corp-1101.sea1.rhapsody.com   "release -p {{ application_config }} -t {{ deploy_environment }} -r {{ config_version }} -R --force -v -m 'Ansible Release {{ comment }}' -Q -s {{ inventory_hostname }} "
 

  - name: push war {{ version  }}
    command: ssh deployment-corp-1101.sea1.rhapsody.com  "release -p {{ application }} -t {{ deploy_environment }} -r {{ version }} -R --force -v -m 'Ansible Release  {{ comment }}' -Q -s {{ inventory_hostname }}"
    delegate_to: 127.0.0.1
    async: 300
    poll: 5
    register: release_output

  - debug: var=release_output.stdout

  - pause: seconds=10


  - name: wait log show complete
    command: tail -500 /var/tom8080/logs/catalina.out
    register: log_output
    until: log_output.stdout.find("Initializing") > -1
    retries: 120
    delay: 10

  - name: wait port {{ http_port }} open
    wait_for: "host={{ inventory_hostname }} port={{ http_port }} delay=15"
    delegate_to: 127.0.0.1
  
  - name: "wait version page return"
    uri:
      url: "http://{{ inventory_hostname }}:{{ http_port }}/{{ app }}/{{ version_page }}"
      status_code: 200
      register: result
      until: result.status == 200
      retries: 240
      delay: 10
    delegate_to: 127.0.0.1

  - action: uri url=http://{{ inventory_hostname }}:{{ http_port }}/{{ app }}/{{ version_page }} return_content=yes
    register: webpage
    delegate_to: 127.0.0.1

  - debug: var=webpage verbosity=2 

  - action: fail
    when: "'{{ version }}' not in webpage.content"
    delegate_to: 127.0.0.1

  - name: call api to verify
    script: ~/release/library/verify/prod/scripts/{{ test_name }}.sh http {{ inventory_hostname }} 8080  {{ app  }}
    when: {{ deploy_environment }} == "prod"
    delegate_to: 127.0.0.1
  

  post_tasks:

  - name: add back to load balancer pool
    command: ssh deployment-corp-1101.sea1.rhapsody.com  "lbmgr -host  {{ inventory_hostname }} --port {{ http_port }} --putback"
#    when: {{ loadbalancer }} != "false"
    delegate_to: 127.0.0.1
   
  - name: Send notification message via Slack all options
    local_action:
      module: slack
      token: T024R4HF1/B1RDDPWM7/CifLKsgIqih1bQj6VFzbvqYt
      msg: "{{ inventory_hostname }} deployment {{ version }} completed"
      channel: "#platform-notification"
      username: "Release Script"
      link_names: 0
      parse: 'none'
